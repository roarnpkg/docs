{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Roarn Roarn is a simple tool for package handling with a Rojo Workspace. It easily manages packages and their dependencies creating a easier and user friendly environment.","title":"Home"},{"location":"#welcome-to-roarn","text":"Roarn is a simple tool for package handling with a Rojo Workspace. It easily manages packages and their dependencies creating a easier and user friendly environment.","title":"Welcome to Roarn"},{"location":"Community/","text":"You may run into some problems while installing Roarn. Not a biggie, we are all here to help you. That's why we have community servers to help you with all you need. Guilded | Discord If you have more specific inquiries send us a DM on Twitter! @roarnpkg","title":"Assistance"},{"location":"CurrentModules/","text":"Importing your current modules to Roarn You probably already created a bunch of modules outside of Roarn. You are so cool! Now its time to make your modules more accessible by importing them to Roarn. You may find it complicated, but with these steps it will be a piece of cake. Step 1 Create a roarn.json file at the root of your project. If your project was not made with the Rojo structure you will have to transfer it before continuing. Step 2 Now that you have your roarn.json file, lets add some content to it to make your package what its supposed to be. { \"name\": \"yourPackageName EX: (roarn_package)\", \"version\": \"theCurrentVersionOfYourPackage EX: (1.0.0)\", \"description\": \"a brief description of your package\" } These are the required fields for your roarn.json file. Your package will most likely not have any dependencies on it so you don't have to worry about that. Step 3 Its now time to publish your package! Use roarn publish to publish your package to the registry. If it all goes as planned you should get that sweet success message at the end. Once you go to your Roarn account you will see your package there. Need help? Refer to Assistance so our team can help you out.","title":"Lets import your modules"},{"location":"CurrentModules/#importing-your-current-modules-to-roarn","text":"You probably already created a bunch of modules outside of Roarn. You are so cool! Now its time to make your modules more accessible by importing them to Roarn. You may find it complicated, but with these steps it will be a piece of cake.","title":"Importing your current modules to Roarn"},{"location":"CurrentModules/#step-1","text":"Create a roarn.json file at the root of your project. If your project was not made with the Rojo structure you will have to transfer it before continuing.","title":"Step 1"},{"location":"CurrentModules/#step-2","text":"Now that you have your roarn.json file, lets add some content to it to make your package what its supposed to be. { \"name\": \"yourPackageName EX: (roarn_package)\", \"version\": \"theCurrentVersionOfYourPackage EX: (1.0.0)\", \"description\": \"a brief description of your package\" } These are the required fields for your roarn.json file. Your package will most likely not have any dependencies on it so you don't have to worry about that.","title":"Step 2"},{"location":"CurrentModules/#step-3","text":"Its now time to publish your package! Use roarn publish to publish your package to the registry. If it all goes as planned you should get that sweet success message at the end. Once you go to your Roarn account you will see your package there.","title":"Step 3"},{"location":"CurrentModules/#need-help","text":"Refer to Assistance so our team can help you out.","title":"Need help?"},{"location":"GetStarted/","text":"Lets learn how to install the Roarn CLI so you can get going creating games, and packages with Roarn. Installing Node.js Installing the Roarn CLI which will allow you to initialize, publish and add packages to the Roarn registry will require Node.js version 15+ . To install Node.js you can go to their website . After Installing Node.js After you have finished installing Node.js successfully you will now have access to npm which is Node.js' package manager. To install the Roarn CLI run: npm install --global roarn After that you will have access to the roarn command. Run roarn --help to learn all of Roarn's commands. VSCode Extension We have a VSCode Extension on alpha right now. It may have bugs, but it can improve your workspace in many ways! Install Extension Roblox Plugin We are in the works for our Roblox plugin that connects with Roarn directly expanding our limits. We'll keep you updated when released.","title":"Installation"},{"location":"GetStarted/#installing-nodejs","text":"Installing the Roarn CLI which will allow you to initialize, publish and add packages to the Roarn registry will require Node.js version 15+ . To install Node.js you can go to their website .","title":"Installing Node.js"},{"location":"GetStarted/#after-installing-nodejs","text":"After you have finished installing Node.js successfully you will now have access to npm which is Node.js' package manager. To install the Roarn CLI run: npm install --global roarn After that you will have access to the roarn command. Run roarn --help to learn all of Roarn's commands.","title":"After Installing Node.js"},{"location":"GetStarted/#vscode-extension","text":"We have a VSCode Extension on alpha right now. It may have bugs, but it can improve your workspace in many ways! Install Extension","title":"VSCode Extension"},{"location":"GetStarted/#roblox-plugin","text":"We are in the works for our Roblox plugin that connects with Roarn directly expanding our limits. We'll keep you updated when released.","title":"Roblox Plugin"},{"location":"Troubleshooting/","text":"No version set for command roarn (when using asdf version manager) Create a .tool-versions file, and add the version of Node.js that you desire. roarn_modules is not a valid member of ReplicatedStorage If you get this error it probably means you did not add the roarn_modules path to the default.project.json file. Go to that file, and replace the ReplicatedStorage part to this: \"ReplicatedStorage\": { \"$className\": \"ReplicatedStorage\", \"Common\": { \"$path\": \"src/shared\" }, \"roarn_modules\": { \"$path\": \"roarn_modules\" } },","title":"Troubleshooting"},{"location":"Troubleshooting/#no-version-set-for-command-roarn-when-using-asdf-version-manager","text":"Create a .tool-versions file, and add the version of Node.js that you desire.","title":"No version set for command roarn (when using asdf version manager)"},{"location":"Troubleshooting/#roarn_modules-is-not-a-valid-member-of-replicatedstorage","text":"If you get this error it probably means you did not add the roarn_modules path to the default.project.json file. Go to that file, and replace the ReplicatedStorage part to this: \"ReplicatedStorage\": { \"$className\": \"ReplicatedStorage\", \"Common\": { \"$path\": \"src/shared\" }, \"roarn_modules\": { \"$path\": \"roarn_modules\" } },","title":"roarn_modules is not a valid member of ReplicatedStorage"},{"location":"ezImportStart/","text":"Introducing EzImport Importing packages with Roarn may be annoying with constant going back and fourth to roarn_modules which is why we created something called EzImport . What is EzImport? EzImport is a light bundled package that comes with Roarn initialized projects to maximize your workspace when importing items. Using EzImport itself won't require that much of an effort with our VSCode extension which we will touch on more later. Install EzImport Didn't initialize your project with Roarn? That's alright, you can still install Roarn Tools easily. roarn install roarn_tools ur done How to use EzImport? To use EzImport you will have to first require it with the Roarn module on roarn_modules . This is as simple as doing this: local import = require(game.ReplicatedStorage.roarn_modules.Roarn) local roarnInitials = import(\"roarnInitials\") Its as simple as that! Okay, but now you may think that its annoying to always require the Roarn module right? Thats where our VSCode extension come in. Using VSCode with EzImport With our VSCode extension you can start typing import on a Luau file and it will already fill it out for you!","title":"EzImport Introduction"},{"location":"ezImportStart/#introducing-ezimport","text":"Importing packages with Roarn may be annoying with constant going back and fourth to roarn_modules which is why we created something called EzImport .","title":"Introducing EzImport"},{"location":"ezImportStart/#what-is-ezimport","text":"EzImport is a light bundled package that comes with Roarn initialized projects to maximize your workspace when importing items. Using EzImport itself won't require that much of an effort with our VSCode extension which we will touch on more later.","title":"What is EzImport?"},{"location":"ezImportStart/#install-ezimport","text":"Didn't initialize your project with Roarn? That's alright, you can still install Roarn Tools easily. roarn install roarn_tools ur done","title":"Install EzImport"},{"location":"ezImportStart/#how-to-use-ezimport","text":"To use EzImport you will have to first require it with the Roarn module on roarn_modules . This is as simple as doing this: local import = require(game.ReplicatedStorage.roarn_modules.Roarn) local roarnInitials = import(\"roarnInitials\") Its as simple as that! Okay, but now you may think that its annoying to always require the Roarn module right? Thats where our VSCode extension come in.","title":"How to use EzImport?"},{"location":"ezImportStart/#using-vscode-with-ezimport","text":"With our VSCode extension you can start typing import on a Luau file and it will already fill it out for you!","title":"Using VSCode with EzImport"},{"location":"roarnAdvantages/","text":"Why should you use Roarn? Using a tool like Roarn will boost your productivity on your Rojo Workspace. Roarn will manage all community made modules for you making your workspace cleaner and more efficient. Find numerous packages in minutes When searching for packages in Roarn it will give quick results on your search in seconds. In return it gives you the best packages to help your development.","title":"Advantages of Roarn"},{"location":"roarnAdvantages/#why-should-you-use-roarn","text":"Using a tool like Roarn will boost your productivity on your Rojo Workspace. Roarn will manage all community made modules for you making your workspace cleaner and more efficient.","title":"Why should you use Roarn?"},{"location":"roarnAdvantages/#find-numerous-packages-in-minutes","text":"When searching for packages in Roarn it will give quick results on your search in seconds. In return it gives you the best packages to help your development.","title":"Find numerous packages in minutes"}]}